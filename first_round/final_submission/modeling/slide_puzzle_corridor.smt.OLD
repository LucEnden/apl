; Function to model a coin step
; Argument 1: a unique number representing a coin
; Argument 2: the current round of moving the coins
; Argument 3: the X coordinate for any given coin
; Argument 4: the Y coordinate for any given coin
; Returns: True or false depending on whether a coin can move
(declare-fun S (Int Int Int Int) Bool)

(assert (and

; At any given round, any given coin can not step outside the bounding box of the puzzle
(forall ((c Int) (r Int))
    (implies
        (<= 1 c 9)
        (and
            ; limit the truthfullness of S for specific X and Y
            (= (S c r 1  1) true)
            (= (S c r 1  2) false)
            (= (S c r 2  1) true)
            (= (S c r 2  2) false)
            (= (S c r 3  1) true)
            (= (S c r 3  2) false)
            (= (S c r 4  1) true)
            (= (S c r 4  2) true)
            (= (S c r 5  1) true)
            (= (S c r 5  2) false)
            (= (S c r 6  1) true)
            (= (S c r 6  2) true)
            (= (S c r 7  1) true)
            (= (S c r 7  2) false)
            (= (S c r 8  1) true)
            (= (S c r 8  2) true)
            (= (S c r 9  1) true)
            (= (S c r 9  2) false)
            (= (S c r 10 1) true)
            (= (S c r 10 2) false)
        )
    )
)

)) ; End of assert

(check-sat)
; (get-model)

(get-value (; Sanity checks
    ; Check for valid positions
    (S 1  1 1 1)
    (S 1  1 2 1)
    (S 1  1 3 1)
    (S 1  1 4 1)
    (S 1  1 4 2)
    (S 1  1 5 1)
    (S 1  1 6 1)
    (S 1  1 6 2)
    (S 1  1 7 1)
    (S 1  1 8 1)
    (S 1  1 8 2)
    (S 1  1 9 1)
    (S 1  1 10 1)
    ; Check for invalid positions
    (S 1  1 1 2)
    (S 1  1 100 100) 
    ; Their should be only 9 valid coins
    (S 9 1 1 1) 
    (S 10 1 1 1) 
))